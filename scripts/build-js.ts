// Build script to create a browser-compatible JavaScript bundle
import { ensureDir } from "https://deno.land/std/fs/mod.ts";
import * as path from "https://deno.land/std/path/mod.ts";
import * as esbuild from "npm:esbuild@0.20.2";
import { denoPlugins } from "jsr:@luca/esbuild-deno-loader@^0.11.1";

const outDir = "./dist";
const tempDir = "./.temp";

import denoConfig from "../deno.json" with { type: "json" };

const importMap = {
  imports: {
    ...denoConfig.imports,
    events: "npm:events", // the plugin doesn't understand the node: prefix, so we just switch it to npm: here
  },
};

console.log("üî® Building CUSS2 JavaScript browser bundle...");

// Create dist and temp directories if they don't exist
await ensureDir(outDir);
await ensureDir(tempDir);

const entryFile = path.join(tempDir, "bundle-entry.js");

// Create a wrapper entrypoint that properly handles imports
const entryCode = `
// Temporary bundle entry point
import { Cuss2 } from "../mod.ts";

// Re-export Cuss2 as the primary export
export { Cuss2 };

// Also create named exports for everything from cuss2-typescript-models
import * as Models from "cuss2-typescript-models";
// export const AppState = Models.ApplicationStateCodes;
// export const AppStateChangeReason = Models.ApplicationStateChangeReasonCodes;
// export const ExecutionMode = Models.ApplicationActivationExecutionModeEnum;
// export const ComponentState = Models.ComponentState;
// export const MessageCodes = Models.MessageCodes;
// export const PlatformDirectives = Models.PlatformDirectives;
// export const CUSSDataTypes = Models.CUSSDataTypes;

// Add all models under a 'Models' namespace
export { Models };

// Export helpers and state change
export * from "../src/helper.ts";
export * from "../src/models/stateChange.ts";
`;

await Deno.writeTextFile(entryFile, entryCode);

// Bundle the main entry point
console.log("üì¶ Bundling TypeScript code...");

try {
  const commonBuildOptions: esbuild.BuildOptions = {
    plugins: [...denoPlugins({ importMapURL: `data:application/json,${JSON.stringify(importMap)}` })],
    entryPoints: ["file://" + path.resolve(entryFile)], // esbuild requires absolute paths or relative to CWD
    bundle: true,
    globalName: "Cuss2", // This will be the global variable name for the IIFE
    platform: "browser", // Target the browser environment
    format: "iife", // Output an IIFE, suitable for browser globals
    // REMOVED: external: ['events', 'node:events'],
    // To help debug which files are included and where 'events' might be coming from if issues persist:
    // metafile: true,
  };

  const result = await esbuild.build({
    ...commonBuildOptions,
    outfile: path.join(outDir, "cuss2.js"),
  });

  console.log(
    `‚úÖ Bundle created successfully with ${result.errors.length} errors and ${result.warnings.length} warnings`,
  );

  // if (result.metafile) {
  //   await Deno.writeTextFile(path.join(outDir, "cuss2.meta.json"), JSON.stringify(result.metafile));
  //   console.log(`üìÑ Metafile written to ${path.join(outDir, "cuss2.meta.json")}`);
  // }

  // Also create a minified version
  await esbuild.build({
    ...commonBuildOptions,
    outfile: path.join(outDir, "cuss2.min.js"),
    minify: true,
    sourcemap: true,
  });

  console.log("‚úÖ Minified bundle created successfully");

  // Write wrapper script that makes all exports available on Cuss2 global
  console.log("üìù Writing wrapper script to expose Cuss2 on global object...");

  const jsCode = await Deno.readTextFile(path.join(outDir, "cuss2.js"));
  const minJsCode = await Deno.readTextFile(path.join(outDir, "cuss2.min.js"));

  // Create wrapper to expose Cuss2 on window/globalThis
  // This appends to the IIFE generated by esbuild.
  const wrapper = `
// Appended wrapper to expose Cuss2 exports onto a global Cuss2 object
;(function(globalCtx) {
  if (typeof Cuss2 === 'undefined') {
    console.error('Cuss2 not found. The bundle might have failed to load or was not generated correctly.');
    return;
  }
  // Create global Cuss2 object, assigning the main Cuss2 export to it.
  const _c2 = Cuss2;
  globalCtx.Cuss2 = _c2.Cuss2;

  // Add all other exports from Cuss2 as properties of globalCtx.Cuss2
  for (const key in _c2) {
    if (key !== 'Cuss2' && Object.prototype.hasOwnProperty.call(_c2, key)) {
      globalCtx.Cuss2[key] = _c2[key];
    }
  }

  // Add version info (consider making this dynamic, e.g., from a version file or package.json)
  globalCtx.Cuss2.version = "${denoConfig.version}";
})(typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : this);
`;

  await Deno.writeTextFile(path.join(outDir, "cuss2.js"), jsCode + wrapper);
  await Deno.writeTextFile(path.join(outDir, "cuss2.min.js"), minJsCode + wrapper);

  console.log("‚úÖ Build complete!");
  console.log(`üì¶ Browser bundles created at:
  - ${outDir}/cuss2.js
  - ${outDir}/cuss2.min.js`);
}
catch (error) {
  console.error("‚ùå Build failed:", error);
  Deno.exit(1);
}
finally {
  // Clean up temporary file and directory
  try {
    await Deno.remove(tempDir, { recursive: true });
    console.log("üßπ Cleaned up temporary directory.");
  }
  catch (cleanupError) {
    console.warn("‚ö†Ô∏è Could not clean up temporary directory:", (cleanupError as Error).message);
  }
  esbuild.stop(); // Stop the esbuild service
}
